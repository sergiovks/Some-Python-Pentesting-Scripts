import sys
import socket
import argparse
import concurrent.futures
import requests

def print_banner():
    banner = """
 ____  _  _ ____  _  _ _ _  _ ____  _  _    ___  _ ____ _  _ 
 |__|  |\ | | __ |__| | |\ | | __ |\ |     |__] | |  | |\ |
 |  |  | \| |__] |  | | | \| |__] | \|     |    | |__| | \|
 
 Python Port Scanner
    """
    print(banner)

def probe_port(ip, port, timeout, protocol):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM if protocol == 'tcp' else socket.SOCK_DGRAM)
        sock.settimeout(timeout)
        if protocol == 'tcp':
            result = sock.connect_ex((ip, port))
        else:
            result = sock.sendto(b'', (ip, port))
        sock.close()
        return result
    except socket.error:
        return None

def parse_port_range(port_range):
    if "-" in port_range:
        start_port, end_port = map(int, port_range.split("-"))
        return start_port, end_port
    else:
        return int(port_range), int(port_range)

def scan_ports(ip, port_range, num_threads, timeout, protocols):
    open_ports = []
    start_port, end_port = parse_port_range(port_range)
    with concurrent.futures.ThreadPoolExecutor(max_workers=num_threads) as executor:
        futures = []
        for port in range(start_port, end_port + 1):
            for protocol in protocols:
                futures.append(executor.submit(probe_port, ip, port, timeout, protocol))
        for future in concurrent.futures.as_completed(futures):
            response = future.result()
            if response == 0:
                open_ports.append(future._kwargs['port'])
    return open_ports

def get_service_name(port, protocol):
    try:
        if protocol == 'tcp':
            response = requests.get(f"https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search={port}")
            response.raise_for_status()
            service_name = response.text.split(f"<td>{port}</td>")[1].split("</a>")[0].split(">")[-1]
        elif protocol == 'udp':
            response = requests.get(f"https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers-udp.xhtml?search={port}")
            response.raise_for_status()
            service_name = response.text.split(f"<td>{port}</td>")[1].split("</a>")[0].split(">")[-1]
        else:
            service_name = None
        return service_name
    except requests.exceptions.RequestException:
        return None

def main():
    # Parse the command-line arguments
    parser = argparse.ArgumentParser(description="Python Port Scanner")
    parser.add_argument("ip", help="IP address to scan")
    parser.add_argument("-p", "--port-range", default="1-65535", help="Port range (e.g., 1-100, 80, 443) (default: 1-65535)")
    parser.add_argument("-t", "--threads", type=int, default=100, help="Number of threads (default: 100)")
    parser.add_argument("-T", "--timeout", type=float, default=1.0, help="Timeout in seconds (default: 1.0)")
    parser.add_argument("-sS", "--syn-scan", action="store_true", help="Perform SYN scan")
    parser.add_argument("-sT", "--tcp-scan", action="store_true", help="Perform TCP scan")
    parser.add_argument("-sU", "--udp-scan", action="store_true", help="Perform UDP scan")
    parser.add_argument("-sY", "--sctp-scan", action="store_true", help="Perform SCTP scan")
    parser.add_argument("-sV", "--service-scan", action="store_true", help="Perform service scan")
    args = parser.parse_args()

    print_banner()

    ip = args.ip
    port_range = args.port_range
    num_threads = args.threads
    timeout = args.timeout

    protocols = []
    if args.syn_scan:
        protocols.append('tcp')
    if args.tcp_scan:
        protocols.append('tcp')
    if args.udp_scan:
        protocols.append('udp')
    if args.sctp_scan:
        protocols.append('sctp')

    open_ports = scan_ports(ip, port_range, num_threads, timeout, protocols)

    if open_ports:
        print("Open Ports:")
        for port in open_ports:
            for protocol in protocols:
                service_name = get_service_name(port, protocol)
                if service_name:
                    print(f"Port {port}/{protocol.upper()}: {service_name}")
                else:
                    print(f"Port {port}/{protocol.upper()}: Unknown Service")
    else:
        print("No open ports found.")

if __name__ == "__main__":
    main()
